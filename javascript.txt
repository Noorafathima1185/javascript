module-2  JavaScript
--------------------
procedural programing - programing paradigm where series of computational steps are carried out.
- unlike oops,where data and methods were tied togather(encapsulated) into class and object,procedural programing uses data and methods/functions has two dffrnt entities.

-JavaScript version ES6
it can be used in both frontend as well as backend
frontend - behaviour (browser)
backend - logical operations (node js)
it also known as single thread programming
line by line execution
Dynamically typed language 

backend
-----------
node js - its an open source JavaScript runtime environment that execute js code outside the web browser
to save - filename.js
for display - console.log(content)
	 -console.log("output is",value);
to open terminal - ctrl+j

datatypes
------------
1.primitive datatypes (unique)
-------------------------
a.string - contents in double quotes
b.number - float and integer
c.boolean - true or false
d.bigInt - large numbers (numbers larger than 2^53 and numbers lessthan -2^53)
e.undefined - variables declared but values are not assigned eg: let x;
f.null - null value let x=null;
g.symbol - to provide unique identifier

2.Non-primitive datatypes
(combination of primitive datatypes)
------------------------------------------------
object - values are stored as key:value pairs 

Variables
------------
variables are used to store data

identifiers - rules to create variables
1.it can be started with alphabets, dollar symbol($) or underscore(_)
2.First character can be followed by alphabets, dollar, underscore and digits.
3.Digits cannot be placed as the first character
4.can use more than one words , but the words should not have space
 - second word can start with capital letter (camel case) or use underscore to separate words.

syntax : variable_name = value ;
eg : x=10;
keyword variable_name = value;
keyword : predefined/reserved set of words which gives a special meaning to the variable.
                   1.const - Reassigning not possible ( hoisting not possible )
                   2.var - Reassigning is possible ( hoisting possible )
                   3.let - Reassigning possible  - block level (starting from one curly bracket and ends with another curly bracket{}) - hoisting not possible
variable hoisting : using a variable before it is declared
eg: console.log(x)
      x=10;

concatination(addition)
-----------------------
- simply refers to adding two datatypes
- number + number gives number
    eg: x=10+10;
    console.log(x) gives 20
-string + string gives string 
    eg: x= "10" + "20"
    console.log(x) gives 1020
-string + number gives string 
    eg: x= 10 + "20"
    console.log(x) gives 1020

Template literals
-----------------
-another way of displaying contents 
`content ${variable_name}`

OPERATORS
---------
1.Arithmetic Operators {+(add), -(minus), /(div), *(multi), **(^ exponential(power)), %(modulas)}
eg: x=5;
y=10;
console.log(`sum of ${x} and ${y} is ${x+y}`)
console.log(`sub of ${x} and ${y} is ${x-y}`)
console.log(`product of ${x} and ${y} is ${x*y}`)
console.log(`remainder of ${x} and ${y} is ${x%y}`)
console.log(`div of ${x} and ${y} is ${x/y}`)

2.Assignment Operators {=}

3.Relational Operators {>,>=,<,<=,==,===}
- == value (left value is same as right value) - comparison 
- === check  value and datatypes and return true or false 

4.logical operators {&&(and), ||(or), !(not)} - returns boolean values
- &&(and) - returns true when the two operations are true
    T && T - T
    T && F - F
    F && T - F 
    F && F - F 
-||(or) - returns true when atleast one operation is true
    T || T - T 
    T || F - T 
    F || T - T 
    F || F - F
- !(not) - gives opposite


5.increment and decrement operators
----------------------------------
increment (++) - add 1 to the current value
decrement(--) - substract 1 from the current value

6.short hand operators
----------------------
x=x+y;
using short hand operators it can be wriiten as x+=y

7.ternary operators
-------------------
syntax : condition?true statement:false statement

conditional statements / decision making statements
---------------------------------------------------
1.if else
---------
syntax :
if(condition){
    statements;
}
else{
    statements;
}
2.if else if
------------
if(condition){
    statements;
}
else if(condition){
    statements;
}
else{
    statements;
}

looping statements
-----------------
-to do task repeatedly
1.while
2.for 

1.while
--------
syntax
variable initialisation
while(condition){
    statement
    exit condition
}

2.for
-----
syntax
for(variable initialisation;condition;exit condition){
    statements;
}
3.nested loops
--------------
loop within another loop

function
---------
-functions are used to do task repeated at different position
-variables inside a function is having block scope
-to access the variable outside we need to return the variable
-no statement after the return statement will be executed.so return statement should be placed as the last statement of the function.

part of functions
------------------
1)function definition
    -statement
    -syntax
     -------
     function name(arguments/parameters 1.........argn){
        statements
     }

arg -  data from outside that are need to execute the task

2)function call
    -to execute the function
    -syntax
     name()

arguments or parameters - the values given to a function to do a certain task (it provide inside the bracket)

functional hoisting
-------------------
- calling a function  before a function is defined
- normal function have functional hoisting

2)Arrow function
---------------
-ES6 
-syntax
--------
const variable = (arguments)=>{
    statement
}
-functional hoisting is not possible

3)predefined functions
----------------------
- built in function of a particular language
eg: console.log()
    typeOf()
    parseInt()
    Math.floor()
    Alert()

4)call back function
--------------------
- function calling another function
- call back function comes as an argument to the another function

5)nested function
-----------------
- function definition inside another function
- closure property:property of a parent function can be accessed inside a child function but not vice versa

asynchronous functions - functions with time delay  eg:set Timeout,api
synchronous - functions without time delay 


Data Structure
---------------
- a specialised format of organizing , processing retrieving and storing data.
- array , stack , queue , list linkedlist , tree, graph , hash etc..


Array 
------
-unlike variables array can store more than one data(can be any type)
definition: Array is a single variable which can store more than one data that are separated by comas and enclosed within a square bracket.

-syntax
-------
arrayname = [item1, item2,........itemn]

-stored has key value pairs
key => index
value => items of the array

index => indicate the position of item in an array
      => its value starts from 0

length = total no.of items/memory locations
       => starts from 1

array methods
--------------
1) push - to add items to the end of an array
2) pop - to remove an item from an array
3) unshift - to add item to the start of an array
4) shift - to remove an item from the start 
5) sort - to arrange an array in ascending or descending order
6) flat() - used to changes the dimension of an array - 2D->1D , 3D->2D... it return an array
7) map() - for - return an array of same no.of emlement as that of its parent
8) forEach() - same as that of for of loop - return void - so that further acvtivity(array methods) cannot be executed.
9) reduce() - return a single value - eg: highest,lowest,sum,product,average etc...
10) filter() - it returns an array satisfying a specific condition.
                    array.filter(variable=>condition)
11) some() - it returns true or false based on the condition applied to an array   (true or false)
12) find() - it returns first element that satisfy the condition.
13) includes() - to check an item present in the array or not.
14) indexOf() - to find the index of a given element in an array.
15) splice() - to add and remove items at a particular position.
          array.slice(index, number of items to be removed, items to be added)
16) slice() - method used to extract a section of an array and return a new array without modifying the origin array.
         array.slice(startIndex,endIndex)
         - endIndex will not be included(excluded)
17) reduceRight() - iteration starts from right and reduce into a single value.



different way to access array item
----------------------------------
1)for loop
2)in - directly access the index of an array with explicitly writing the condition and increment operators. (index)
3)of - directly access the items in an array

Binary Search
-------------
- reduces the time delay (better than linear search)
- array should be arranged in ascending order

Nested Array
------------
- array within another array


string methods
--------------
1) startsWith() - check whether the given string starts with a particular character.
                - returns boolean values
                - case sensitive

2) endsWith() - check whether the given string ends with a particular character.
              - returns boolean values
              - case sensitive

3) toUpperCase() - to convert the given string into capital letter.

4) toLowerCase() - to convert the given string into small letter.

5) trim() - to remove blank space at the start and ends.

6) substring() - to create a substring from a given string.
     array.substring(startIndex,endIndex)
     endIndex is exluded

7) slice() - string.slice(startIndex,endIndex)
     endIndex will be excluded
     accept negative values
     starts from end of the string 

8) split(value) - divide the given string into substring  based on a particular value.
     it returns an array

9) replace(searchvalue,replacevalue) - replace a particular word/character from a given string.
    replace first matching word.

10) replaceAll(searchvalue,replacevalue) - replace all the matching word.

11) Array.from() - divide the given string based on each character and returns an array.(not includes blank space)


object
------
- is used to store more than one data with more clarity.
- definition : object is a single variable that hold more than one data of different datatype as key:value pairs that are separated by commas and enclosed within curly bracket.

syntax
------
objectname ={
    key:value,
    ..........
    keyn:valuen
}





oops(object oriented programming)
---------------------------------
- its a modern programing paradigm/style which consider real time entity into object and class.


basic
-----
1) class  - is a blue print which contains common features from which diff objects can be create.

2) object - are the real time entities that are created from the class.

3) reference - the memory location where the properties and methods are stored.

property - is Variables inside a class
methods - functions inside a class

syntax
------
class Classname{
    // 1)property
    // 2)methods
    // 3)constructor(){} - used to initialize values to property
}

- it is not mandatory that all the three , that is property,methods and constructor should always present inside the class.

- instance variable(this.variablename) - inorder to accecc properties inside the class.

objects
-------
syntax:-

const objectname = new Classname()

- objects are used inorder to access properties or methods outside the class .


pillars of oops
---------------
1) inheritance - mechanism used to access the methods and properties from other class.
    - parent class - super class / base class
    - child class - sub class / derived class

keyword - extends - classical inheritance

object inheritance - keyword - __proto__

2) polymorphism
   poly - many
   morphism - forms

   1)method overloading.
     - method with same name but diff arguments.
     - it executes based on the no.of arguments.
     - JavaScript doesnot support method overloading.

     - rest operator(...) - it returns arguments as array.
     
   2)method overriding.
     - method with same name and same no.of arguments.
     - the last written method.
     - JavaScript support this concept.

refer
3) encapsulation
4) abstraction

error handling/exception handling
---------------------------------
exception - run time errors.

try-catch block
- at a time any one block words,either try or catch

try{
    statement that can commit error
}
catch{
    statement to handle error
}
finally{
    statement that have to be executed in both case.
}


--------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------JavaScript - frontend------------------------------------------------------------------

Browser - application programme which provides an interface for user to interact with all information available in the www.

browser understanding language - html,css,JavaScript

JavaScript - behaviour - html,css

JavaScript accecc dimension

DOM - DOCUMENT OBJECT MODEL
---------------------------
- created by browser.
- its a tree structure of the html document.

BOM - Browser object  model.


how to use js filename
----------------------
1) internal
    <script>
    logic
    </script>
    - after body tag.(loading time reduce cheyym)
2) external
    create external file with extention as .js
    - <script src='path'/>


how to access HTML tags using js
-----------------------
1) document.getElementByTagName('tagname') - return htmlcollection(array)
2) document.getElementById('id') - return directly the tag.
3) document.getElementByClassName('classname') - return html collection
4) document.querySelector(tag/#id/.class) - it return first satisfying tags.
5) document.querySelectorAll(tag/#id/.class) - NodeList - array


- how to change the content in a tag
------------------------------------
- innerHTML


Events - actions that can lead to an update in DOM.
------
1) click
2) change
3) submit
4) load
5) key down


js class
--------
date -> systethinte date access cheyym

DataBase
--------
- Used to store data.
- key:value
- both key and value should be string.
- large amount of data can be stored.

Browser Storage
---------------
- to store data.
- limited amount of data can be stored.

1) Local Storage
 - data will be stored permenantly.  

 operations in local storage
 ---------------------------
 1) localstorage.setItem("key",value) - to add data to local storage.
 2) localstorage.getItem("key") - to retrieve the data from localstorage.
 3) localstorage.removeItem("key") - to delete a dataitem from localstorage.


2) Session Storage
 - not a permanent storage.
 - remove when the session expires.

 ((JSON.stringify - to convert a object into a string.))
 ((JSON.parse - to convert string into object.))


 API - Applicatiom Programming Interface
 ---------------------------------------
 - used to communicate bw two application available in internet.

 types of API - scope ne base cheythitt aanu API ne 4 aayi thirichath
 ------------
 1) public API - globally available
 2) private API - eg: a company
 3) partner API - eg: some companys and not public
 4) composite API - ivarde ellam interconnected ,ithil llarm indavm

 http - hypertext transfer protocol
------------------------------------
https, ftp, smtp, tcp, update

http methods
------------
1) get method - to retrieve data.
2) post method - to add data.
3) put method - to update the data.
4) delete method -  to remove data.

request have two part
---------------------
1) header - header contain the content type and also autherisation tokens...(autherisation purpose)
2) body - body contain data to be shared.(post and put)

JSON format - JavaScript object notation
----------------------------------------
- common format for data sharing.

syntax
------
{
   "key" : "value"
}

rules
-----
- data should be shared as key:value pairs
- both key and value should be string
- each key:value pairs should separated by commas and enclosed within curly bracket - object.
- if the shared data is array then enclosed in square bracket.

response status
---------------
1) 1xx series - information
2) 2xx series - success
3) 3xx series - redirection
4) 4xx series - client side error
5) 5xx series - server side error


URL - uniform resource locator
------------------------------
- it is the resource address in internet.

RESTFUL API - reprasetational state transfer
--------------------------------------------
- it is a sw architecture style that was created to guide the design and development of web.

refer
-----
SOAP,RPC

API testing tool
----------------
1) thunder client - vs code extension.
2) postman - real tool for testing API.

how to create API
-----------------
1) AJAX - asynchronous JavaScript xml
        - xml HTTPREQUEST class used
        - open() - api connection
        - send() - used to send the request
        - readystate - is the property inside the class which value will change from 1-4
        - this change can be seen using onreadystatechange function
        - response will only be obtained when the value of readystate reaches 4
        - responseText is the property in the class where we get the data.
2) FETCH
    - ES6
    - promise class
    - to resolve asynchronous function
    - this class have 3 state
          1) resolve - .then()
          2) reject - .catch()
          3) pending - not resolved and not rejected.


3) ASYNC AWAIT
   - it makes the promise easier to write.
   -  .then() is used only once.
   - can store that data into a variable.
   - async makes the function returns promise.(function inside which the api call function is written)
   - await - makes the function pause the executtion and wait for a resolved promise before it continues.(befire the api call function) (time delay ullathinte munnil eg:api call nte munne)
   - AWAIT should always written inside the async function.
   - it avoids call back hell.


How JavaScript handles asynchronous and synchronous function being a single thread programming language
------------------------------------------------------------
